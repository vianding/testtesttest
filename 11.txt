%module qlib

%{
#define GTO_USE_CONST
#define WINAPI
#include "qlib.h"
%}

#define GTO_USE_CONST
#define WINAPI

%include "typemaps.i"
%include "cstring.i"

///////////////////////////////////////////////////////////////////////////////
// Input Arrays (e.g., reqValue)
///////////////////////////////////////////////////////////////////////////////

// ---- array


// For input/output arrays
%apply (long* IN_ARRAY1, long DIM1) {
    (long* exDivDates, long numExDivDates),
    (long* recordDates, long numExDivDates),
    (long* paymentDates, long numExDivDates),
    (long* sinkDates, long numSinkDates),
    (long* structuredCouponDates, long numStructuredCouponDates),
    (long* stepDates, long numStepDates),
    (long* callDates, long numCallDates),
    (long* reqValue, long numreqValue),
    (long* dates, long numDates)
};

%apply (double* IN_ARRAY1, long DIM1) {
    (double* dividendAmounts, long numExDivDates),
    (double* sinkAmounts, long numSinkDates),
    (double* structuredCouponRates, long numStructuredCouponDates),
    (double* stepRates, long numStepDates),
    (double* callPrices, long numCallDates),
    (double rates, long numDates)
};

%typemap(argout) double *outValue {
    PyObject *out_list = PyList_New(numreqValue);
    for (int i = 0; i < numreqValue; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *outValue {}

%typemap(argout) long *outValue {
    PyObject *out_list = PyList_New(numreqValue);
    for (int i = 0; i < numreqValue; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outValue {}

%typemap(argout) long *outStatus {
    PyObject *out_list = PyList_New(numreqValue);
    for (int i = 0; i < numreqValue; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outStatus {}

%typemap(argout) long *outNumFailures {
    $result = PyLong_FromLong(*$1);
}
%typemap(out) long *outNumFailures {}

%typemap(argout) long *outVersion {
    $result = PyLong_FromLong(*$1);
}
%typemap(out) long *outVersion {}

%typemap(argout) long *outBondType {
    $result = PyLong_FromLong(*$1);
}
%typemap(out) long *outBondType {}

%typemap(argout) double *dividendAmounts {
    PyObject *out_list = PyList_New(numExDivDates);
    for (int i = 0; i < numExDivDates; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *dividendAmounts {}

%typemap(argout) double *stepRates {
    PyObject *out_list = PyList_New(numStepDates);
    for (int i = 0; i < numStepDates; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *stepRates {}

%typemap(argout) double *sinkAmounts {
    PyObject *out_list = PyList_New(numSinkDates);
    for (int i = 0; i < numSinkDates; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *sinkAmounts {}

%typemap(argout) double *outRisk {
    $result = PyFloat_FromDouble(*$1);
}
%typemap(out) double *outRisk {}

%typemap(argout) double *outAccruedInterest {
    $result = PyFloat_FromDouble(*$1);
}
%typemap(out) double *outAccruedInterest {}

%typemap(argout) double *price {
    $result = PyFloat_FromDouble(*$1);
}
%typemap(out) double *price {}

%typemap(argout) double *yield {
    $result = PyFloat_FromDouble(*$1);
}
%typemap(out) double *yield {}

%typemap(argout) long *outDates {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outDates {}

%typemap(argout) long *outAccrualStartDates {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outAccrualStartDates {}

%typemap(argout) long *outAccrualEndDates {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outAccrualEndDates {}

%typemap(argout) double *outPrincipalAmounts {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *outPrincipalAmounts {}

%typemap(argout) double *outCouponAmounts {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *outCouponAmounts {}

%typemap(argout) double *outYearFractions {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *outYearFractions {}

%typemap(argout) long *outDates {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outDates {}

%typemap(argout) long **dates {
    PyObject *out_list = PyList_New(*numDates);
    for (int i = 0; i < *numDates; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong((*$1)[i]));
    $result = out_list;
}
%typemap(out) long **dates {}

%include "qlib.h"
