%module qlib

%{
#define GTO_USE_CONST
#define WINAPI
#include "qlib.h"
%}

#define GTO_USE_CONST
#define WINAPI

%include "typemaps.i"
%include "cstring.i"

///////////////////////////////////////////////////////////////////////////////
// Input Arrays (e.g., reqValue)
///////////////////////////////////////////////////////////////////////////////
%typemap(in) (const long *reqValue, long numreqValue) {
    if (!PyList_Check($input)) {
        SWIG_exception_fail(SWIG_TypeError, "Expected a list of integers");
    }
    $2 = (long)PyList_Size($input);
    $1 = (long *)malloc($2 * sizeof(long));
    for (long i = 0; i < $2; ++i) {
        $1[i] = (long)PyLong_AsLong(PyList_GetItem($input, i));
    }
}

%typemap(in) (long *dates, long numDates) {
    if (!PyList_Check($input)) {
        SWIG_exception_fail(SWIG_TypeError, "Expected list of integers");
    }
    $2 = (long)PyList_Size($input);
    $1 = (long *)malloc($2 * sizeof(long));
    for (long i = 0; i < $2; ++i) {
        $1[i] = (long)PyLong_AsLong(PyList_GetItem($input, i));
    }
}

%typemap(in) (double *rates, long numDates) {
    if (!PyList_Check($input)) {
        SWIG_exception_fail(SWIG_TypeError, "Expected list of floats");
    }
    $2 = (long)PyList_Size($input);
    $1 = (double *)malloc($2 * sizeof(double));
    for (long i = 0; i < $2; ++i) {
        $1[i] = PyFloat_AsDouble(PyList_GetItem($input, i));
    }
}

///////////////////////////////////////////////////////////////////////////////
// Output Arrays
///////////////////////////////////////////////////////////////////////////////

%typemap(argout) double *outValue {
    PyObject *out_list = PyList_New(numreqValue);
    for (int i = 0; i < numreqValue; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *outValue {}

%typemap(argout) long *outValue {
    PyObject *out_list = PyList_New(numreqValue);
    for (int i = 0; i < numreqValue; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outValue {}

%typemap(argout) long *outStatus {
    PyObject *out_list = PyList_New(numreqValue);
    for (int i = 0; i < numreqValue; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outStatus {}

%typemap(argout) long *outNumFailures {
    $result = PyLong_FromLong(*$1);
}
%typemap(out) long *outNumFailures {}

%typemap(argout) long *outVersion {
    $result = PyLong_FromLong(*$1);
}
%typemap(out) long *outVersion {}

%typemap(argout) long *outBondType {
    $result = PyLong_FromLong(*$1);
}
%typemap(out) long *outBondType {}

%typemap(argout) double *outRisk {
    $result = PyFloat_FromDouble(*$1);
}
%typemap(out) double *outRisk {}

%typemap(argout) double *outAccruedInterest {
    $result = PyFloat_FromDouble(*$1);
}
%typemap(out) double *outAccruedInterest {}

%typemap(argout) double *price {
    $result = PyFloat_FromDouble(*$1);
}
%typemap(out) double *price {}

%typemap(argout) double *yield {
    $result = PyFloat_FromDouble(*$1);
}
%typemap(out) double *yield {}

%typemap(argout) long *outDates {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outDates {}

%typemap(argout) long *outAccrualStartDates {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outAccrualStartDates {}

%typemap(argout) long *outAccrualEndDates {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong($1[i]));
    $result = out_list;
}
%typemap(out) long *outAccrualEndDates {}

%typemap(argout) double *outPrincipalAmounts {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *outPrincipalAmounts {}

%typemap(argout) double *outCouponAmounts {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *outCouponAmounts {}

%typemap(argout) double *outYearFractions {
    PyObject *out_list = PyList_New(numoutDates);
    for (int i = 0; i < numoutDates; ++i)
        PyList_SetItem(out_list, i, PyFloat_FromDouble($1[i]));
    $result = out_list;
}
%typemap(out) double *outYearFractions {}

%typemap(argout) long **dates {
    PyObject *out_list = PyList_New(*numDates);
    for (int i = 0; i < *numDates; ++i)
        PyList_SetItem(out_list, i, PyLong_FromLong((*$1)[i]));
    $result = out_list;
}
%typemap(out) long **dates {}

%include "qlib.h"
